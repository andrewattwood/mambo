# 1 "util.S"
# 1 "<built-in>" 1
# 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 1 "util.S"
 # 1 "<built-in>" 1
 # 1 "util.S" 2
 # 21 "util.S"
 # These helpers are executed from .text and are not copied to the code cache
 # 46 "util.S"
.global dbm_client_entry
.p2align 2
.type dbm_client_entry,@function
.Lfunc_begin_dbm_client_entry:
.cfi_startproc purecap
 # 69 "util.S"
dbm_client_entry:
  MOV cSP, c1
  MOV c3, c2
  mov x1, xzr
  mov x2, xzr
  STP cZR, cZR, [cSP, #-(2 * 16)]!
  BR c3



.Lfunc_end_dbm_client_entry:
.size dbm_client_entry, .Lfunc_end_dbm_client_entry-.Lfunc_begin_dbm_client_entry
.cfi_endproc


 # Thread entry 
 # R0 - new SP
 # R1 - Thread entry instruction
.global th_enter
.p2align 2
.type th_enter,@function
.Lfunc_begin_th_enter:
.cfi_startproc purecap
 # 100 "util.S"
th_enter:
  MOV cSP, c0
  LDP c4, c5, [cSP, #(2 * 16)]
  LDP c6, c7, [cSP, #(4 * 16)]
  LDP c8, c9, [cSP, #(6 * 16)]
  LDP c10, c11, [cSP, #(8 * 16)]
  LDP c12, c13, [cSP, #(10 * 16)]
  LDP c14, c15, [cSP, #(12 * 16)]
  LDP c16, c17, [cSP, #(14 * 16)]
  LDP c18, c19, [cSP, #(16 * 16)]
  LDP c20, c21, [cSP, #(18 * 16)]
  LDP c22, c23, [cSP, #(20 * 16)]
  LDP c24, c25, [cSP, #(22 * 16)]
  LDP c26, c27, [cSP, #(24 * 16)]
  LDR c28, [cSP, #(26 * 16)]
  LDP c29, c30, [cSP, #(28 * 16)]
  LDP c2, c3, [cSP], #(30 * 16)

  BR c1


.Lfunc_end_th_enter:
.size th_enter, .Lfunc_end_th_enter-.Lfunc_begin_th_enter
.cfi_endproc

 # passed to thread_create
.global new_thread_trampoline
.p2align 2
.type new_thread_trampoline,@function
.Lfunc_begin_new_thread_trampoline:
.cfi_startproc purecap

new_thread_trampoline:





  STP c21, c22, [cSP, #(2 * 16)]
  STP c23, c24, [cSP, #(4 * 16)]
  STP c25, c26, [cSP, #(6 * 16)]
  STP c27, c28, [cSP, #(8 * 16)]
  STP c29, c30, [cSP, #(10 * 16)]
  MOV c1, cSP
  B dbm_start_thread_pth



.Lfunc_end_new_thread_trampoline:
.size new_thread_trampoline, .Lfunc_end_new_thread_trampoline-.Lfunc_begin_new_thread_trampoline
.cfi_endproc

.global return_with_sp
.p2align 2
.type return_with_sp,@function
.Lfunc_begin_return_with_sp:
.cfi_startproc purecap

return_with_sp:




  MOV cSP, c0
  LDP c21, c22, [cSP, #(2 * 16)]
  LDP c23, c24, [cSP, #(4 * 16)]
  LDP c25, c26, [cSP, #(6 * 16)]
  LDP c27, c28, [cSP, #(8 * 16)]
  LDP c29, c30, [cSP, #(10 * 16)]
  LDP c19, c20, [cSP], #(12 * 16)
  RET


.Lfunc_end_return_with_sp:
.size return_with_sp, .Lfunc_end_return_with_sp-.Lfunc_begin_return_with_sp
.cfi_endproc

.global raw_syscall
.p2align 2
.type raw_syscall,@function
.Lfunc_begin_raw_syscall:
.cfi_startproc purecap

raw_syscall:
 # 197 "util.S"
  MOV c8, c0
  MOV c0, c1
  MOV c1, c2
  MOV c2, c3
  MOV c3, c4
  MOV c4, c5
  MOV c5, c6
  MOV c6, c7
  SVC 0
  RET


.Lfunc_end_raw_syscall:
.size raw_syscall, .Lfunc_end_raw_syscall-.Lfunc_begin_raw_syscall
.cfi_endproc

.global signal_trampoline
.p2align 2
.type signal_trampoline,@function
.Lfunc_begin_signal_trampoline:
.cfi_startproc purecap


signal_trampoline:
 # 235 "util.S"
  STP c2, c3, [cSP, #-(16 * 22)]!
  STP c4, c5, [cSP, #(16 * 2)]
  STP c6, c7, [cSP, #(16 * 4)]
  STP c8, c9, [cSP, #(16 * 6)]
  STP c10, c11, [cSP, #(16 * 8)]
  STP c12, c13, [cSP, #(16 * 10)]
  STP c14, c15, [cSP, #(16 * 12)]
  STP c16, c17, [cSP, #(16 * 14)]
  STP c18, c29, [cSP, #(16 * 16)]
  STR c30, [cSP, #(16 * 18)]
  STP c0, c1, [cSP, #(16 * 20)]

  BL signal_dispatcher

  LDP c4, c5, [cSP, #(16 * 2)]
  LDP c6, c7, [cSP, #(16 * 4)]
  LDP c8, c9, [cSP, #(16 * 6)]
  LDP c10, c11, [cSP, #(16 * 8)]
  LDP c12, c13, [cSP, #(16 * 10)]
  LDP c14, c15, [cSP, #(16 * 12)]
  LDP c16, c17, [cSP, #(16 * 14)]
  LDP c18, c29, [cSP, #(16 * 16)]
  LDR c30, [cSP, #(16 * 18)]
  LDP c2, c3, [cSP], #(16 * 20)

  CBZ X0, sigret

  BR c0
sigret:
  ADD cSP, cSP, #(16 * 2)
  MOV X8, #139
  SVC 0


.Lfunc_end_signal_trampoline:
.size signal_trampoline, .Lfunc_end_signal_trampoline-.Lfunc_begin_signal_trampoline
.cfi_endproc

.global atomic_increment_u64
.p2align 2
.type atomic_increment_u64,@function
.Lfunc_begin_atomic_increment_u64:
.cfi_startproc purecap

atomic_increment_u64:
 # 298 "util.S"
  LDXR X2, [c0]
  ADD X2, X2, X1
  STXR W3, X2, [c0]
  CBNZ X3, atomic_increment_u64
  MOV X0, X2
  RET


.Lfunc_end_atomic_increment_u64:
.size atomic_increment_u64, .Lfunc_end_atomic_increment_u64-.Lfunc_begin_atomic_increment_u64
.cfi_endproc


.global atomic_increment_u32
.p2align 2
.type atomic_increment_u32,@function
.Lfunc_begin_atomic_increment_u32:
.cfi_startproc purecap

atomic_increment_u32:
 # 328 "util.S"
  LDXR W2, [c0]
  ADD W2, W2, W1
  STXR W3, W2, [c0]
  CBNZ W3, atomic_increment_u32
  MOV W0, W2
  RET


.Lfunc_end_atomic_increment_u32:
.size atomic_increment_u32, .Lfunc_end_atomic_increment_u32-.Lfunc_begin_atomic_increment_u32
.cfi_endproc

.global atomic_decrement_if_positive_i32
.p2align 2
.type atomic_decrement_if_positive_i32,@function
.Lfunc_begin_atomic_decrement_if_positive_i32:
.cfi_startproc purecap

atomic_decrement_if_positive_i32:
 # 363 "util.S"
  LDXR W2, [c0]
  CMP W2, W1
  BLT abort
  SUB W2, W2, W1
  STXR W3, W2, [c0]
  CBNZ W3, atomic_decrement_if_positive_i32
  MOV W0, W2
  RET
abort:
  CLREX
  MOV W0, #-1
  RET


.Lfunc_end_atomic_decrement_if_positive_i32:
.size atomic_decrement_if_positive_i32, .Lfunc_end_atomic_decrement_if_positive_i32-.Lfunc_begin_atomic_decrement_if_positive_i32
.cfi_endproc


.global safe_fcall_trampoline
.p2align 2
.type safe_fcall_trampoline,@function
.Lfunc_begin_safe_fcall_trampoline:
.cfi_startproc purecap

safe_fcall_trampoline:
 # 413 "util.S"
  STP c8, c9, [cSP, #-(16 * 16)]!
  STP c10, c11, [cSP, #(16 * 2)]
  STP c12, c13, [cSP, #(16 * 4)]
  STP c14, c15, [cSP, #(16 * 6)]
  STP c16, c17, [cSP, #(16 * 8)]
  STP c18, c19, [cSP, #(16 * 10)]
  STP c20, c21, [cSP, #(16 * 12)]
  STP c29, c30, [cSP, #(16 * 14)]

  MRS X19, NZCV
  MRS X20, FPCR
  MRS X21, FPSR

  BL push_neon

  BLR c8

  BL pop_neon

  MSR NZCV, X19
  MSR FPCR, X20
  MSR FPSR, X21

  LDP c10, c11, [cSP, #(16 * 2)]
  LDP c12, c13, [cSP, #(16 * 4)]
  LDP c14, c15, [cSP, #(16 * 6)]
  LDP c16, c17, [cSP, #(16 * 8)]
  LDP c18, c19, [cSP, #(16 * 10)]
  LDP c20, c21, [cSP, #(16 * 12)]
  LDP c29, c30, [cSP, #(16 * 14)]
  LDP c8, c9, [cSP], #(16 * 16)

  RET


.Lfunc_end_safe_fcall_trampoline:
.size safe_fcall_trampoline, .Lfunc_end_safe_fcall_trampoline-.Lfunc_begin_safe_fcall_trampoline
.cfi_endproc


.global __try_memcpy
.p2align 2
.type __try_memcpy,@function
.Lfunc_begin___try_memcpy:
.cfi_startproc purecap


__try_memcpy:
 # 473 "util.S"
  LDRB W3, [c1], #1
  STRB W3, [c0], #1
  SUB X2, X2, #1
  CBNZ X2, __try_memcpy
  MOV X0, #0
  RET


.Lfunc_end___try_memcpy:
.size __try_memcpy, .Lfunc_end___try_memcpy-.Lfunc_begin___try_memcpy
.cfi_endproc

.global __try_memcpy_error
.p2align 2
.type __try_memcpy_error,@function
.Lfunc_begin___try_memcpy_error:
.cfi_startproc purecap


__try_memcpy_error:







  MOV X0, #-1
  RET


.Lfunc_end___try_memcpy_error:
.size __try_memcpy_error, .Lfunc_end___try_memcpy_error-.Lfunc_begin___try_memcpy_error
.cfi_endproc
